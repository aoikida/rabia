/*
    Copyright 2021 Rabia Research Team and Developers

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
syntax = "proto3";

/*
  message.proto defines types of messages that should be passed from/to clients and among server layers (i.e., proxy,
  consensus, and network).

  When you want to modify this file:
    If you want to change formats/fields of messaging objects, install (gogo)protobuf through the steps below on your
    developer machine (e.g., your Mac) only.

  How to install (gogo)protobuf:
  step 0
    set your GOPATH. I have the following line in my ~/.bash_profile:
      export GOPATH=${HOME}/go
    add the following directory to your PATH:
      ${HOME}/go/bin
  step 1, see: https://github.com/gogo/protobuf#installation
    install Go, make sure the go binary is in the system PATH
    install protoc: I grabbed the binary named protoc-3.15.6-osx-x86_64.zip for my Mac, and put it under ${GOPATH}/bin.
    include some source code: I also moved the google/protobuf folder inside the include folder to
    $GOPATH/src/google/protobuf

  step 2, run
    go get -u google.golang.org/protobuf/cmd/protoc-gen-go
    if you get some timeout error, try:
      git clone https://github.com/protocolbuffers/protobuf-go.git
      rename the protobuf-go folder to protobuf, and put it under $GOPATH/src/google.golang.org
      run: go install google.golang.org/protobuf/cmd/protoc-gen-go

  step 3, see: https://github.com/gogo/protobuf#speed
    run the followings to instal gogo-protobuf:
      go get github.com/gogo/protobuf/protoc-gen-gofast
      go get github.com/gogo/protobuf/protoc-gen-gogofaster
      go get github.com/gogo/protobuf/protoc-gen-gogoslick
    you can even install more extensions, check https://github.com/gogo/protobuf#more-speed-and-more-generated-code

  step 4, modify this file and comment/uncomment gogo-protobuf/protobuf headers of this file according to the use case

  step 5, to recompile this file, run:
    cd ~/go/src/rabia/internal/message

    if you want to use gogo-protobuf:
      protoc -I=. -I=/usr/local/go/src -I=/usr/local/go/src/github.com/gogo/protobuf/protobuf --gogoslick_out=. ./message.proto

    if you want to use the vanilla protobuf:
      protoc -I=. -I=$GOPATH/src -I=<path to the unzip-ed include folder>/google/protobuf --go_out=. ./message.proto
    mine is:
      protoc -I=. -I=/usr/local/go/src -I=/usr/local/go/src/google/protobuf --go_out=. ./message.proto
 */

/*
  gogo-protobuf header (please comment out the vanilla protobuf header)
*/

package message;
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.populate_all) = true;

/*
  the end of the gogo-protobuf header
*/

/*
  vanilla protobuf header (please comment out the gogo-protobuf header)
*/
//package message;
//option go_package = "../message";
/*
  the end of the vanilla protobuf header
*/

/*
  Command is used from client to proxy and from proxy to client only. When a client sends a Command message to a proxy,
  the message carries one or more client requests/commands/proposals to be appended to the replicated log. The SvrSeq
  field is not used. When a proxy sends a Command message to a connected client, the message carries the agreed proposal
  and the slot number in the SvrSeq field.

  If the client batch size = 1, a valid Command object looks like:
  Command{CliId: 0, CliSeq: 1000, SvrSeq: 0, Commands: ["0key1val1"]}

  If the client batch size = 3, a valid Command object looks like:
  Command{CliId: 0, CliSeq: 1001, SvrSeq: 0, Commands: ["0key1val1", "0key2val2", "1key3"]}

  CliId:  the from/to client id
  CliSeq: the client sequence
  SvrSeq: the decided slot # (from proxy to client only)
  Commands:
      each command in the array looks is of the form <operation type><key>[<value>], e.g., 0key1val1 and 1key2 are
      both valid. Regarding the operation type, 0 stands for a write operation and 1 stands for a read operation.

  Each command is a string of 17 bytes (modifiable through Conf.KeyLen and Conf.ValLen)
    [0:1]   (1 byte): "0" == a write operation,  "1" == a read operation
    [1:9]  (8 bytes): a string Key
    [9:17] (8 bytes): a string Value
 */
message Command {
  uint32 CliId = 1;
  uint32 CliSeq = 2;
  uint32 SvrSeq = 3;
  repeated string Commands = 4;
}

/*
  To pass around a ConsensusObj among layers, embed it as a field of a Msg object because then we only need to keep Msg
  channels for inter-layer communications.

  If the client batch size = 1 and the proxy batch size = 1, valid ConsensusObj objects look like:
  ConsensusObj {ProId: 4, ProSeq: 500, SvrSeq: 714, IsNull: true}
  ConsensusObj {ProId: 4, ProSeq: 500, SvrSeq: 714, IsNull: false, CliIds: [0], CliSeqs: [1000],
    Commands: ["0key1val1"]}

  If the client batch size = 2 and the proxy batch size = 5, valid ConsensusObj object looks like:
  ConsensusObj {ProId: 4, ProSeq: 500, SvrSeq: 714, IsNull: false, CliIds: [0, 0, 0, 0, 0],
    CliSeqs: [1000, 1001, 1002, 1003, 1004], Commands: ["0k1v1", "1k2", "0k3v3",
    "1k4", "0k5v5", "1k6", "0k7v7", "1k8", "0k9v9", "1k10"]}

  ConsensusObj {ProId: 4, ProSeq: 500, SvrSeq: 119, IsNull: false, CliIds: [0, 0, 0, 1, 1],
    CliSeqs: [1000, 1001, 1002, 999, 1000], Commands: ["0k1v1", "1k2", "0k3v3",
    "1k4", "0k5v5", "1k6", "0k1v1", "1k2", "0k3v3", "1k4"]}

  ProId:    the id of the proxy that initiates this object
  ProSeq:   the sequence of this object
  SvrSeq:   the decision slot number (0 could mean unassigned / decision in process)
  IsNull:   true if this slot is a NULL slot. if false, the following fields are used, see valid formats above
  CliIds:   the client id's that are associated with commands
  CliSeqs:  the client sequences that are associated with commands
  Commands: the clients' commands
 */
message ConsensusObj {
  uint32 ProId = 1;
  uint32 ProSeq = 2;
  uint32 SvrSeq = 3;
  bool IsNull = 4;
  repeated uint32 CliIds = 5;
  repeated uint32 CliSeqs = 6;
  repeated string Commands = 7;
}

/*
  ClientRequest:
    from proxy to network, among networks

  Proposal, State, Vote, ProposalRequest, ProposalReply, and Decision:
    from consensus to network, among networks, from network to consensus

  ProposalRequest:
    Phase: SvrId (the source server's id), Value: the sequence number of the proposal
    from Executor to the local network layer then to another network layer (based on message.Value?)

  ProposalReply:
    Phase: the destination server's id, Value: the sequence number of the proposal
    from MsgHandler to the local network layer then to another network layer (based on message.Phase)
 */
enum MsgType {
  ClientRequest = 0;
  Proposal = 1;
  State = 2;
  Vote = 3;
  ProposalRequest = 4;
  ProposalReply = 5;
  Decision = 6;
  PQcheck = 7;
}

/*
  A Msg object can be passed around without a embedded ConsensusObj -- simply let that field be null


   Type: one of the message types listed above
   Phase:  the phase of the message
   Value: reserved for special occasions, see below
   Obj: a pointer to a consensus object, could be null for binary consensus messages and other cases

  The usages of the Value field:
    State, and Vote messages: my binary consensus message of phase P round R
    ProposalRequest and ProposalReply: the sequence number of the proposal
    for internal communications between executor and messageHandler, see binConMsgHandling()

 */
message Msg {
  MsgType Type = 1;
  uint32 Phase = 2;
  uint32 Value = 3;
  ConsensusObj Obj = 4;
}
